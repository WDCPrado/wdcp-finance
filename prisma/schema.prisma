// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    password  String
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones
    budgets               MonthlyBudget[]
    categories            Category[]
    transactions          Transaction[]
    recurrentTransactions RecurrentTransaction[]
    budgetTemplates       BudgetTemplate[]

    @@map("users")
}

model MonthlyBudget {
    id          String   @id @default(cuid())
    name        String
    month       Int
    year        Int
    totalIncome Decimal  @db.Decimal(10, 2)
    isTemplate  Boolean  @default(false)
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relaciones
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    categories   Category[]
    transactions Transaction[]

    // √çndices
    @@unique([userId, month, year])
    @@map("monthly_budgets")
}

model Category {
    id           String       @id @default(cuid())
    name         String
    description  String?
    color        String
    icon         String
    budgetAmount Decimal      @db.Decimal(10, 2)
    type         CategoryType
    userId       String
    budgetId     String

    // Relaciones
    user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    budget                MonthlyBudget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    transactions          Transaction[]
    recurrentTransactions RecurrentTransaction[]

    @@map("categories")
}

model Transaction {
    id           String          @id @default(cuid())
    type         TransactionType
    amount       Decimal         @db.Decimal(10, 2)
    description  String
    date         DateTime
    isRecurrent  Boolean         @default(false)
    recurrenceId String?
    userId       String
    budgetId     String
    categoryId   String

    // Relaciones
    user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    budget   MonthlyBudget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    category Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@map("transactions")
}

model RecurrentTransaction {
    id                String             @id @default(cuid())
    type              TransactionType
    amount            Decimal            @db.Decimal(10, 2)
    description       String
    startDate         DateTime
    endDate           DateTime?
    isActive          Boolean            @default(true)
    interval          RecurrenceInterval
    intervalValue     Int
    nextExecutionDate DateTime
    lastExecutionDate DateTime?
    userId            String
    categoryId        String
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt

    // Relaciones
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@map("recurrent_transactions")
}

model BudgetTemplate {
    id          String   @id @default(cuid())
    name        String
    totalIncome Decimal  @db.Decimal(10, 2)
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relaciones
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("budget_templates")
}

// Enums
enum TransactionType {
    income
    expense
}

enum CategoryType {
    income
    expense
}

enum RecurrenceInterval {
    monthly
    quarterly
    semi_annual
    annual
    custom
}
